#include <iostream>
#include <cmath>
#include <vector>
#include <TCanvas.h>
#include <TRandom3.h>
#include <TApplication.h>
#include <TGraphErrors.h>
#include <fstream>
#include <TH1D.h>
#include <bits/stdc++.h>


using namespace std;


namespace dati{
  double kb = 1.38065e-23;   //in Joule/K
  double sigma = 3.4e-10;    //nel SI
  double epsilon = 119* kb;  //epsilon in Joule
  string a1,a2;
  double b1,b2;
  double T=20;    //in kelvin
  double tau = 5e-15;     //5 femptosecondi
  double m = 6.68e-26;    //è la massa in chili

}

//FUNZIONI

void readfile(string nomefile, int &n, vector<string>& at, vector<double>& X, vector<double>& Y, vector<double>& Z){


  ifstream file(nomefile);
  file >>n>>dati::a1>>dati::a2>>dati::b1>>dati::b2;
  double x,y,z;
  string Ar;
  for(int i=0; i<n; i++){
    file >> Ar >> x >> y >> z;
    at.push_back(Ar);
    X.push_back(x*pow(10,-10));    //converto i dati in sistema internazionale
    Y.push_back(y*pow(10,-10));
    Z.push_back(z*pow(10,-10));
  }
  file.close();
}


void writefile (ofstream& file, int n, vector<string>& at, vector<double>& X, vector<double>& Y, vector<double>& Z){

  file << n << endl;
  file.precision(15);
  file << dati::a1 << " "  <<    dati::a2 << " " <<  dati::b1 << " "   << dati::b2 << " "  << endl;
  file.precision(10);
								   
  for(int i=0; i<n; i++){
    file << at[i] << " " << X[i]*pow(10,10) << " " <<  Y[i]*pow(10,10) << " "   << Z[i]*pow(10,10) << " "<< endl;     //ho riconvertito i dati nel file di output in armstrong
  }
}


double energia_pot(int n, vector<double>& X, vector<double>& Y, vector<double>& Z){
  double U=0;
  double r_ij;

  for(int i=0; i<n-1; i++){
    for(int j=i+1; j<n; j++){
      r_ij = sqrt( pow(X[i] - X[j],2) +  pow(Y[i] - Y[j],2) +  pow(Z[i] - Z[j],2)  );
      U = U + 4*dati::epsilon * ( pow(dati::sigma / r_ij ,12) - pow(dati::sigma / r_ij,6)  );
    }
  }
  return U;
}


double energia_cin(int n, vector<double>& VX, vector<double>& VY, vector<double>& VZ){
  double K=0;
  for(int i=0; i<n; i++){
    K += 0.5*dati::m*pow(VX[i],2) + 0.5*dati::m*pow(VY[i],2) + 0.5*dati::m*pow(VZ[i],2);
  }
  return K;
}


/*
//questa è con la formula online giusta senza azione e rezione
void forza(int n, vector<double>& X, vector<double>& Y, vector<double>& Z, vector<double> &fx, vector<double> &fy, vector<double> &fz){
double r_ij;
fx.clear();
fy.clear();
fz.clear();
for(int i=0;i<n;i++){
double a=0, b=0, c=0;
for(int j=0; j<n; j++){
if (j==i) continue;
	
else {
r_ij = sqrt( pow(X[i] - X[j],2) +  pow(Y[i] - Y[j],2) +  pow(Z[i] - Z[j],2)  );
a += (0.5* 4*dati::epsilon*(- (6*pow(dati::sigma,6))/(pow(r_ij,6)) + (12*pow(dati::sigma,12))/(pow(r_ij,12)) )*(X[i]-X[j])/(r_ij*r_ij) );
b += ( 0.5*4*dati::epsilon*(- (6*pow(dati::sigma,6))/(pow(r_ij,6)) + (12*pow(dati::sigma,12))/(pow(r_ij,12)) )*(Y[i]-Y[j])/(r_ij*r_ij) );
c += ( 0.5*4*dati::epsilon*( -(6*pow(dati::sigma,6))/(pow(r_ij,6)) + (12*pow(dati::sigma,12))/(pow(r_ij,12)) )*(Z[i]-Z[j])/(r_ij*r_ij) );
}
}
fx.push_back(a);
fy.push_back(b);
fz.push_back(c);
}
}
*/



void forza(int n, vector<double>& X, vector<double>& Y, vector<double>& Z, vector<double> &fx, vector<double> &fy, vector<double> &fz){
  double r_ij;
  fx.clear();
  fy.clear();
  fz.clear();
  vector<double> fx_temp(n,0.0);
  vector<double> fy_temp(n,0.0);
  vector<double> fz_temp(n,0.0);
  double a,b,c;
  for(int i=0;i<n-1;i++){
    a=0; b=0; c=0;
    for(int j=i+1; j<n; j++){
      r_ij = sqrt( pow(X[i] - X[j],2) +  pow(Y[i] - Y[j],2) +  pow(Z[i] - Z[j],2)  );
      a = (4*dati::epsilon*(- (6*pow(dati::sigma,6))/(pow(r_ij,6)) + (12*pow(dati::sigma,12))/(pow(r_ij,12)) )*(X[i]-X[j])/(r_ij*r_ij) );
      b = (4*dati::epsilon*(- (6*pow(dati::sigma,6))/(pow(r_ij,6)) + (12*pow(dati::sigma,12))/(pow(r_ij,12)) )*(Y[i]-Y[j])/(r_ij*r_ij) );
      c = (4*dati::epsilon*( -(6*pow(dati::sigma,6))/(pow(r_ij,6)) + (12*pow(dati::sigma,12))/(pow(r_ij,12)) )*(Z[i]-Z[j])/(r_ij*r_ij) );

      fx_temp[i] += a;
      fx_temp[j] += -a;
      fy_temp[i] += b;
      fy_temp[j] += -b;
      fz_temp[i] += c;
      fz_temp[j] += -c;
    }
  }
  fx = fx_temp;
  fy = fy_temp;
  fz = fz_temp;
}









//MAIN

int main(){

  time_t start, end;
  time(&start);
  
  TApplication app("app",0,NULL);

  vector<double> rx;
  vector<double> ry;
  vector<double> rz;
  vector<string> at;

  int N;

  readfile("ar38_to.xyz", N, at, rx, ry,rz);
  ofstream file("output.xyz");
  writefile(file,N,at,rx,ry,rz);

  double U;
  U = energia_pot(N, rx, ry, rz);  
  cout.precision(15);
  cout << U << endl;


  //Generatore
  
  TRandom3 rnd;
  rnd.SetSeed(121356);
  vector<double> vx_star;
  vector<double> vy_star;
  vector<double> vz_star;
  double v_cm_x, v_cm_y, v_cm_z;
  for(int i=0; i<N; i++){
    
    vx_star.push_back( rnd.Gaus(0,1));
    vy_star.push_back( rnd.Gaus(0,1));
    vz_star.push_back( rnd.Gaus(0,1));
    v_cm_x += vx_star[i];
    v_cm_y += vy_star[i];
    v_cm_z += vz_star[i];
  }
  v_cm_x = v_cm_x/N;
  v_cm_y = v_cm_y/N;
  v_cm_z = v_cm_z/N;

  vector<double> vx;
  vector<double> vy;
  vector<double> vz;
  for(int i=0; i<N; i++){
    vx.push_back(vx_star[i] - v_cm_x  );    //queste sono le velocità traslate
    vy.push_back(vy_star[i] - v_cm_y  );    //quelle che lui chiama con v barra
    vz.push_back(vz_star[i] - v_cm_z  );
  }

  double K_bar;
  for(int i=0; i<N; i++){
    K_bar += pow(vx[i] ,2) + pow(vy[i] ,2) + pow(vz[i] ,2);
  }
  
  K_bar = K_bar*0.5*dati::m;     //energia cinetica K barra

  double K_0;
  K_0 = 3./2*N*dati::kb*dati::T ;
 

  for (int i=0; i<N; i++) {
    vx[i] = vx[i]*sqrt(K_0/K_bar);
    vy[i] = vy[i]*sqrt(K_0/K_bar);
    vz[i] = vz[i]*sqrt(K_0/K_bar);
  }


  //Calcolo della forza

  vector<double> fx;
  vector<double> fy;
  vector<double> fz;


  

  //VELOCITY VERLET

  double t=0;
  double tmax = 1e-10;
  double dt = dati::tau;
  double ax, ay, az;
  vector<double> ax_temp,  ay_temp,  az_temp;
  TGraph g1;
  TGraph g2, g3, g4;
  // TH1D h("h","",100,0,10);
  int n_passi=0;
  int n_campioni=0;
  double E,K;
  double T_temp;
  double E_med = 0;
  double std_dev = 0;


 
  forza(N,rx,ry,rz,fx,fy,fz);      //prima del loop altrimenti le calcolo troppe volte


  while(t<tmax){

    E=0;
    K=0;
    ax_temp.clear();
    ay_temp.clear();
    az_temp.clear();
    v_cm_x = 0;
    for(int i=0; i<N; i++){
      ax = fx[i]/dati::m;     // questa è a(t) calcolata con f(t) per la i esima particella
      ax_temp.push_back(ax);
      ay = fy[i]/dati::m;     // questa è a(t) calcolata con f(t) per la i esima particella
      ay_temp.push_back(ay);
      az = fz[i]/dati::m;     // questa è a(t) calcolata con f(t) per la i esima particella
      az_temp.push_back(az);
      rx[i] = rx[i] + vx[i]*dt + 0.5 * ax*dt*dt;    //calcolo nuove posizioni
      ry[i] = ry[i] + vy[i]*dt + 0.5 * ay*dt*dt;
      rz[i] = rz[i] + vz[i]*dt + 0.5 * az*dt*dt;
    }

    forza(N,rx,ry,rz,fx,fy,fz);
    U = energia_pot(N, rx, ry, rz);
    for(int i=0; i<N; i++){
      ax = fx[i]/dati::m ;   //sono le nuove accelerazioni
      ay = fy[i]/dati::m ;
      az = fz[i]/dati::m ; 
      vx[i] = vx[i] + 0.5*( ax_temp[i] + ax )*dt;       //calcolo nuove velocità
      vy[i] = vy[i] + 0.5*( ay_temp[i] + ay )*dt;
      vz[i] = vz[i] + 0.5*( az_temp[i] + az )*dt;
    }

  
    K = energia_cin(N,vx,vy,vz);
    E = K+U;
    T_temp = 2./3 * K /(N*dati::kb);
    E_med += E;
    g1.SetPoint(n_campioni,t,E);
    g2.SetPoint(n_campioni,t,U);
    g3.SetPoint(n_campioni,t,K);
    g4.SetPoint(n_campioni,t,T_temp);
    n_campioni += 1;

    if(n_passi%10==0){
      writefile(file,N,at,rx,ry,rz);
    }
    n_passi += 1;
    t += dt;
  }
  
  E_med = E_med /n_passi;
  cout << "energia media = " << E_med << endl;
  for(int i=0; i<n_campioni; i++){
    std_dev += pow( g1.GetPointY(i) - E_med  ,2);
  }
  std_dev = sqrt(std_dev);
  cout << "std_dev = " << std_dev << endl;
  cout << "numero di passi = " << n_passi << endl;



  //GRAFICI CONTROLLO
  //  TCanvas c("","",1600,1200);
  // c.Divide(2,2,0,0);

  //  c.cd(1);
  TCanvas c1;
  g1.SetTitle("Energia");
  g1.Draw("ap");
  //  c.cd(2);
  TCanvas c2;
  g2.SetTitle("Energia potenziale");
  g2.Draw("ap");
  // c.cd(3);
  TCanvas c3;
  g3.SetTitle("Energia cinetica");
  g3.Draw("ap");
  // c.cd(4);
  TCanvas c4;
  g4.SetTitle("Temperatura");
  g4.Draw("ap");






  

  time(&end);
  double time_taken = double(end - start);
  cout << "Time taken by program is : " << fixed
       << time_taken << setprecision(5);
  cout << " sec " << endl;



  app.Run(true);

  return 0;

}
